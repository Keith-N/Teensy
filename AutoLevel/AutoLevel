/* Teensy 3.5 
 *
 * Autolevel
 * Not completed
 * 
 * 3-21-19 
 * 
*/

// Libaries 
#include <Arduino.h> //Used for Visual Studio's code 
#include <Wire.h>    //I2C communication 

////////////////////////////////////////////////////////
//PIN DEFINITIONS
////////////////////////////////////////////////////////

// Reciever  
int ch1 = 7;
int ch2 = 8;
int ch3 = 14;
int ch4 = 35;

// esc
int escOut1 = 5;
int escOut2 = 6;
int escOut3 = 10;
int escOut4 = 20;

// led 
int led = 13; 

/////////////////////////////////////////////////////////
//SWITCHS
/////////////////////////////////////////////////////////

bool debug = false; 
bool print = false; 

/////////////////////////////////////////////////////////
// GLOBAL VARIABLES
/////////////////////////////////////////////////////////

// Timing Variables for Pulse Width
 unsigned long prev1 = 0;
 volatile unsigned long delta1 = 1500;
 unsigned long prev2 = 0;
 volatile unsigned long delta2 = 1500;
 unsigned long prev3 = 0;
 volatile unsigned long delta3 = 1500;
 unsigned long prev4 = 0;
 volatile unsigned long delta4 = 1500;
 unsigned long prev5 = 0;
 volatile unsigned long delta5= 1500;
 unsigned long prev6= 0;

 // PWM settings 

 // Get maximum value for selected PWM resolution (100% Duty)
 int pwmMax = 256;
 // Initializing pulse for ESCs, 25% duty
 int escInit = pwmMax/4;

 int pwmFreq = 250;
 int pwmRes = 8;
 int escPulseTime = 4000;

 // Pulse length 
 int escPulse1;
 int escPulse2;
 int escPulse3;
 int escPulse4;

 // signal for analog write 
 int escPulse1PWM;
 int escPulse2PWM;
 int escPulse3PWM;
 int escPulse3PWM;

 int throttle;

 /////////////////////////////////////////////////////////
 // INTERUPTS
 /////////////////////////////////////////////////////////

 // Get pulse timing 
 void ch1Int()
{
  if (digitalReadFast(ch1)){
    prev1 = micros();
  }
  else{
    delta1 = micros() - prev1;
  }
}

void ch2Int()
{
  if (digitalReadFast(ch2)){
    prev2 = micros();
  }
  else{
    delta2 = micros() - prev2;
  }
}
 
void ch3Int()
{
   if (digitalReadFast(ch3)){
    prev3 = micros();
   }
   else{
    delta3 = micros() - prev3;
   }  
}

void ch4Int()
{
   if (digitalReadFast(ch4)){
    prev4 = micros();
   }
   else{
    delta4 = micros() - prev4;
   }
}


void setup() 
{
	// Set up Serial monitor 
	if(print == true || debug == true)  
	{
		Serial.begin(115200);
		while(!Serial);
	}

	// Set pin direction 
	pinMode(ch1,INPUT);
	pinMode(ch2,INPUT);
	pinMode(ch3,INPUT);
	pinMode(ch4,INPUT);
	pinMode(escOut1,OUTPUT);
	pinMode(escOut2,OUTPUT);
	pinMode(escOut3,OUTPUT);
	pinMode(escOut4,OUTPUT);
	pinMode(led,OUTPUT);

	//Setup rx pin interrupts
  	attachInterrupt(ch1,ch1Int,CHANGE);
  	attachInterrupt(ch2,ch2Int,CHANGE);
  	attachInterrupt(ch3,ch3Int,CHANGE);
  	attachInterrupt(ch4,ch4Int,CHANGE);
	
	// All on Timer FTM0 -> pwmFreq
  	analogWriteFrequency(escOut1, pwmFreq);

  	// Set PWM resolution
  	analogWriteResolution(pwmRes);
	
	// Initialize ESCs
  	analogWrite(escOut1, escInit);
  	analogWrite(escOut2, escInit);
  	analogWrite(escOut3, escInit);
  	analogWrite(escOut4, escInit);
  	delay(5000);

	// Setup complete 
	digitalWrite(led,HIGH);

}

void loop() 
{
	// Test to see if code works 
	throttle = delta3;
	escPulse1PWM = throttle*pwmMax/escPulseTime;
	analogWrite(escOut1, escPulse1PWM);
  	analogWrite(escOut2, escPulse1PWM);
  	analogWrite(escOut3, escPulse1PWM);
  	analogWrite(escOut4, escPulse1PWM);
	delay(10);
}
